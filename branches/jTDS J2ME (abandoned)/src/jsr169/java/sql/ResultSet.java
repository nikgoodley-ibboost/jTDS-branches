// jTDS JDBC Driver for Microsoft SQL Server and Sybase
// Copyright (C) 2005 The jTDS Project
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
package java.sql;

import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import java.util.Calendar;

/**
 * A table of data representing a database result set, which is usually
 * generated by executing a statement that queries the database.
 * <p/>
 * A <code>ResultSet</code> object maintains a cursor pointing to its current
 * row of data. Initially the cursor is positioned before the first row. The
 * next method moves the cursor to the next row, and because it returns false
 * when there are no more rows in the <code>ResultSet object</code>, it can be
 * used in a while loop to iterate through the result set.
 * <p/>
 * A default <code>ResultSet</code> object is not updatable and has a cursor
 * that moves forward only. Thus, you can iterate through it only once and only
 * from the first row to the last row. It is possible to produce
 * <code>ResultSet</code> objects that are scrollable and/or updatable. The
 * following code fragment, in which con is a valid <code>Connection</code>
 * object, illustrates how to make a result set that is scrollable and
 * insensitive to updates by others, and that is updatable. See
 * <code>ResultSet</code> fields for other options.
 * <pre>
 *        Statement stmt = con.createStatement(
 *                                       ResultSet.TYPE_SCROLL_INSENSITIVE,
 *                                       ResultSet.CONCUR_UPDATABLE);
 *        ResultSet rs = stmt.executeQuery("SELECT a, b FROM TABLE2");
 *        // rs will be scrollable, will not show changes made by others,
 *        // and will be updatable
 * </pre>
 * The <code>ResultSet</code> interface provides <i>getter</i> methods (
 * <code>getBoolean, getLong</code>, and so on) for retrieving column values
 * from the current row. Values can be retrieved using either the index number
 * of the column or the name of the column. In general, using the column index
 * will be more efficient. Columns are numbered from 1. For maximum portability,
 * result set columns within each row should be read in left-to-right order, and
 * each column should be read only once.
 * <p/>
 * For the getter methods, a JDBC driver attempts to convert the underlying data
 * to the Java type specified in the getter method and returns a suitable Java
 * value. The JDBC specification has a table showing the allowable mappings from
 * SQL types to Java types that can be used by the <code>ResultSet</code> getter
 * methods.
 * <p/>
 * Column names used as input to getter methods are case insensitive. When a
 * getter method is called with a column name and several columns have the same
 * name, the value of the first matching column will be returned. The column
 * name option is designed to be used when column names are used in the SQL
 * query that generated the result set. For columns that are NOT explicitly
 *  named in the query, it is best to use column numbers. If column names are
 * used, there is no way for the programmer to guarantee that they actually
 * refer to the intended columns.
 * <p/>
 * A set of updater methods were added to this interface in the JDBC 2.0 API
 * (JavaTM 2 SDK, Standard Edition, version 1.2). The comments regarding
 * parameters to the getter methods also apply to parameters to the updater
 * methods.
 * <p/>
 * The updater methods may be used in two ways:
 * <ol>
 * <li> to update a column value in the current row. In a scrollable
 *     <code>ResultSet</code> object, the cursor can be moved backwards and
 *     forwards, to an absolute position, or to a position relative to the
 *     current row. The following code fragment updates the NAME column in the
 *     fifth row of the <code>ResultSet</code> object <code>rs</code> and then
 *     uses the method <code>updateRow</code> to update the data source table
 *     from which <code>rs</code> was derived.
 *<pre>
 *         rs.absolute(5); // moves the cursor to the fifth row of rs
 *         rs.updateString("NAME", "AINSWORTH"); // updates the
 *            // NAME column of row 5 to be AINSWORTH
 *         rs.updateRow(); // updates the row in the data source </pre>
 * </li>
 * <li>
 *     to insert column values into the insert row. An updatable
 *     <code>ResultSet</code> object has a special row associated with it that
 *     serves as a staging area for building a row to be inserted. The following
 *     code fragment moves the cursor to the insert row, builds a three-column
 *     row, and inserts it into rs and into the data source table using the
 *     method <code>insertRow</code>.
 * <pre>
 *         rs.moveToInsertRow(); // moves cursor to the insert row
 *         rs.updateString(1, "AINSWORTH"); // updates the
 *            // first column of the insert row to be AINSWORTH
 *         rs.updateInt(2,35); // updates the second column to be 35
 *         rs.updateBoolean(3, true); // updates the third row to true
 *         rs.insertRow();
 *         rs.moveToCurrentRow();</pre>
 * </li>
 * </ol>
 * A <code>ResultSet</code> object is automatically closed when the
 * <code>Statement</code> object that generated it is closed, re-executed, or
 * used to retrieve the next result from a sequence of multiple results.
 * <p/>
 * The number, types and properties of a <code>ResultSet</code> object's columns
 * are provided by the <code>ResulSetMetaData</code> object returned by the
 * <code>ResultSet.getMetaData</code> method.
 *
 * @see Statement#executeQuery(java.lang.String)
 * @see Statement#getResultSet()
 * @see ResultSetMetaData
 */
public interface ResultSet {

    /**
     * The constant indicating that the rows in a result set will be processed
     * in a forward direction; first-to-last. This constant is used by the
     * method <code>setFetchDirection</code> as a hint to the driver, which the
     * driver may ignore.
     */
    int FETCH_FORWARD = 1000;

    /**
     * The constant indicating that the rows in a result set will be processed
     * in a reverse direction; last-to-first. This constant is used by the
     * method <code>setFetchDirection</code> as a hint to the driver, which the
     * driver may ignore.
     */
    int FETCH_REVERSE = 1001;

    /**
     * The constant indicating that the order in which rows in a result set will
     * be processed is unknown. This constant is used by the method
     * <code>setFetchDirection</code> as a hint to the driver, which the driver
     * may ignore.
     */
    int FETCH_UNKNOWN = 1002;

    /**
     * The constant indicating the type for a <code>ResultSet</code> object
     * whose cursor may move only forward.
     */
    int TYPE_FORWARD_ONLY = 1003;

    /**
     * The constant indicating the type for a <code>ResultSet</code> object that
     * is scrollable but generally not sensitive to changes made by others.
     */
    int TYPE_SCROLL_INSENSITIVE = 1004;

    /**
     * The constant indicating the type for a <code>ResultSet</code> object that
     * is scrollable and generally sensitive to changes made by others.
     */
    int TYPE_SCROLL_SENSITIVE = 1005;

    /**
     * The constant indicating the concurrency mode for a <code>ResultSet</code>
     * object that may NOT be updated.
     */
    int CONCUR_READ_ONLY = 1007;

    /**
     * The constant indicating the concurrency mode for a <code>ResultSet</code>
     * object that may be updated.
     */
    int CONCUR_UPDATABLE = 1008;

    /**
     * The constant indicating that <code>ResultSet</code> objects should not be
     * closed when the method <code>Connection.commit</code> is called.
     */
    int HOLD_CURSORS_OVER_COMMIT = 1;

    /**
     * The constant indicating that <code>ResultSet</code> objects should be
     * closed when the method <code>Connection.commit</code> is called.
     */
    int CLOSE_CURSORS_AT_COMMIT = 2;

    /**
     * Moves the cursor down one row from its current position. A
     * <code>ResultSet</code> cursor is initially positioned before the first
     * row; the first call to the method next makes the first row the current
     * row; the second call makes the second row the current row, and so on.
     * <p/>
     * If an input stream is open for the current row, a call to the method next
     * will implicitly close it. A <code>ResultSet</code> object's warning chain
     * is cleared when a new row is read.
     *
     * @return true if the new current row is valid;
     *         false if there are no more rows
     * @throws SQLException if a database access error occurs
     */
    boolean next()
            throws SQLException;

    /**
     * Releases this <code>ResultSet<code> object's database and JDBC resources
     * immediately instead of waiting for this to happen when it is
     * automatically closed.
     * <p/>
     * <b>Note:</b> A <code>ResultSet</code> object is automatically closed by
     * the <code>Statement</code> object that generated it when that Statement
     * object is closed, re-executed, or is used to retrieve the next result
     * from a sequence of multiple results. A <code>ResultSet</code> object is
     * also automatically closed when it is garbage collected.
     *
     * @throws SQLException if a database access error occurs
     */
    void close()
            throws SQLException;

    /**
     * Reports whether the last column read had a value of SQL NULL. Note that
     * you must first call one of the getter methods on a column to try to read
     * its value and then call the method wasNull to see if the value read was
     * SQL NULL.
     *
     * @return true if the last column value read was SQL NULL and false
     *         otherwise
     * @throws SQLException if a database access error occurs
     */
    boolean wasNull()
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>String</code> in the Java
     * programming language.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is null
     * @throws SQLException if a database access error occurs
     */
    String getString(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>boolean</code> in the Java
     * programming language.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is false
     * @throws SQLException if a database access error occurs
     */
    boolean getBoolean(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>byte</code> in the Java
     * programming language.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    byte getByte(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>short</code> in the Java
     * programming language.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    short getShort(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>int</code> in the Java
     * programming language.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    int getInt(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>long</code> in the Java
     * programming language.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    long getLong(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>float</code> in the Java
     * programming language.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    float getFloat(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>double</code> in the Java
     * programming language.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    double getDouble(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a byte array in the Java programming
     * language. The bytes represent the raw values returned by the driver.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is null
     * @throws SQLException if a database access error occurs
     */
    byte[] getBytes(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Date</code> object in
     * the Java programming language.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is null
     * @throws SQLException if a database access error occurs
     */
    Date getDate(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Time</code> object in
     * the Java programming language.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is null
     * @throws SQLException if a database access error occurs
     */
    Time getTime(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object
     * in the Java programming language.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL NULL, the value returned
     *         is null
     * @throws SQLException if a database access error occurs
     */
    Timestamp getTimestamp(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a stream of ASCII characters. The value
     * can then be read in chunks from the stream. This method is particularly
     * suitable for retrieving large LONGVARCHAR values. The JDBC driver will do
     * any necessary conversion from the database format into ASCII.
     * <p/>
     * <b>Note:</b> All the data in the returned stream must be read prior to
     * getting the value of any other column. The next call to a getter method
     * implicitly closes the stream. Also, a stream may return 0 when the method
     * <code>InputStream.available</code> is called whether there is data
     * available or not.
     *
     * @param columnIndex the first column is 1, the second is 2, ..
     * @return a Java input stream that delivers the database column value as a
     *         stream of one-byte ASCII characters; if the value is SQL NULL,
     *         the value returned is null
     * @throws SQLException if a database access error occurs
     */
    InputStream getAsciiStream(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a binary stream of uninterpreted bytes.
     * The value can then be read in chunks from the stream. This method is
     * particularly suitable for retrieving large LONGVARBINARY values.
     *
     * @param columnIndex the first column is 1, the second is 2, ..
     * @return a Java input stream that delivers the database column value as a
     *         stream of uninterpreted bytes; if the value is SQL NULL, the
     *         value returned is null
     * @throws SQLException if a database access error occurs
     */
    InputStream getBinaryStream(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>String</code> in the Java
     * programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is null
     * @throws SQLException if a database access error occurs
     */
    String getString(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>boolean</code> in the Java
     * programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is false
     * @throws SQLException if a database access error occurs
     */
    boolean getBoolean(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>byte</code> in the Java
     * programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    byte getByte(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>short</code> in the Java
     * programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    short getShort(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>int</code> in the Java
     * programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    int getInt(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>long</code> in the Java
     * programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    long getLong(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>float</code> in the Java
     * programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    float getFloat(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>double</code> in the Java
     * programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is 0
     * @throws SQLException if a database access error occurs
     */
    double getDouble(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a byte array in the Java
     * programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is null
     * @throws SQLException if a database access error occurs
     */
    byte[] getBytes(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Date</code> object in
     * the Java programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is null
     * @throws SQLException if a database access error occurs
     */
    Date getDate(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Time</code> object in
     * the Java programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is null
     * @throws SQLException if a database access error occurs
     */
    Time getTime(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object.
     *
     * @param columnName the SQL name of the column
     * @return the column value; if the value is SQL NULL, the value returned
     *         is null
     * @throws SQLException if a database access error occurs
     */
    Timestamp getTimestamp(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a stream of ASCII characters. The value
     * can then be read in chunks from the stream. This method is particularly
     * suitable for retrieving large LONGVARCHAR values. The JDBC driver will do
     * any necessary conversion from the database format into ASCII.
     * <p/>
     * <b>Note:</b> All the data in the returned stream must be read prior to
     * getting the value of any other column. The next call to a getter method
     * implicitly closes the stream. Also, a stream may return 0 when the method
     * <code>available</code> is called whether there is data available or not.
     *
     * @param columnName the SQL name of the column
     * @return a Java input stream that delivers the database column value as a
     *         stream of one-byte ASCII characters. If the value is SQL NULL,
     *         the value returned is null.
     * @throws SQLException if a database access error occurs
     */
    InputStream getAsciiStream(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a stream of uninterpreted bytes. The value
     * can then be read in chunks from the stream. This method is particularly
     * suitable for retrieving large LONGVARBINARY values.
     * <p/>
     * <b>Note:</b> All the data in the returned stream must be read prior to
     * getting the value of any other column. The next call to a getter method
     * implicitly closes the stream. Also, a stream may return 0 when the method
     * <code>available</code> is called whether there is data available or not.
     *
     * @param columnName the SQL name of the column
     * @return a Java input stream that delivers the database column value as a
     *         stream of uninterpreted bytes; if the value is SQL NULL, the
     *         result is null
     * @throws SQLException if a database access error occurs
     */
    InputStream getBinaryStream(String columnName)
            throws SQLException;

    /**
     * Retrieves the first warning reported by calls on this
     * <code>ResultSet</code> object. Subsequent warnings on this
     * <code>ResultSet</code> object will be chained to the
     * <code>SQLWarning</code> object that this method returns.
     * <p/>
     * The warning chain is automatically cleared each time a new row is read.
     * This method may not be called on a <code>ResultSet</code> object that has
     * been closed; doing so will cause an <code>SQLException</code> to be thrown.
     * <p/>
     * <b>Note:</b> This warning chain only covers warnings caused by
     * <code>ResultSet</code> methods. Any warning caused by
     * <code>Statement</code> methods (such as reading OUT parameters) will be
     * chained on the <code>Statement</code> object.
     *
     * @return the first SQLWarning object reported or null if there are none
     * @throws SQLException if a database access error occurs or this method is
     *         called on a closed result set
     */
    SQLWarning getWarnings()
            throws SQLException;

    /**
     * Clears all warnings reported on this ResultSet object. After this method
     * is called, the method <code>getWarnings</code> returns null until a new
     * warning is reported for this <code>ResultSet</code> object.
     *
     * @throws SQLException if a database access error occurs
     */
    void clearWarnings()
            throws SQLException;

    /**
     * Retrieves the name of the SQL cursor used by this <code>ResultSet</code>
     *  object.
     * <p/>
     * In SQL, a result table is retrieved through a cursor that is named. The
     * current row of a result set can be updated or deleted using a positioned
     *  update/delete statement that references the cursor name. To insure that
     * the cursor has the proper isolation level to support update, the cursor's
     * SELECT statement should be of the form SELECT FOR UPDATE. If FOR UPDATE
     * is omitted, the positioned updates may fail.
     * <p/>
     * The JDBC API supports this SQL feature by providing the name of the SQL
     * cursor used by a ResultSet object. The current row of a
     * <code>ResultSet</code> object is also the current row of this SQL cursor.
     * <p/>
     * <b>Note:</b> If positioned update is not supported, a SQLException is
     * thrown.
     *
     * @return the SQL name for this <code>ResultSet</code> object's cursor
     * @throws SQLException if a database access error occurs
     */
    String getCursorName()
            throws SQLException;

   /**
    * Retrieves the number, types and properties of this <code>ResultSet</code>
    * object's columns.
    *
    * @return the description of this <code>ResultSet</code> object's columns
    * @throws SQLException if a database access error occurs
    */
    ResultSetMetaData getMetaData()
            throws SQLException;

    /**
     * Gets the value of the designated column in the current row of this
     * <code>ResultSet</code> object as an <code>Object</code>Object in the Java
     * programming language.
     * <p/>
     * This method will return the value of the given column as a Java object.
     * The type of the Java object will be the default Java object type
     * corresponding to the column's SQL type, following the mapping for
     * built-in types specified in the JDBC specification. If the value is an
     * SQL NULL, the driver returns a Java null.
     * <p/>
     * This method may also be used to read datatabase-specific abstract data
     * types.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return a java.lang.Object holding the column value
     * @throws SQLException if a database access error occurs
     */
    Object getObject(int columnIndex)
            throws SQLException;

    /**
     * Gets the value of the designated column in the current row of this
     * <code>ResultSet</code> object as an <code>Object</code>Object in the Java
     * programming language.
     * <p/>
     * This method will return the value of the given column as a Java object.
     * The type of the Java object will be the default Java object type
     * corresponding to the column's SQL type, following the mapping for
     * built-in types specified in the JDBC specification. If the value is an
     * SQL NULL, the driver returns a Java null.
     * <p/>
     * This method may also be used to read datatabase-specific abstract data
     * types.
     *
     * @param columnName the SQL name of the column
     * @return a java.lang.Object holding the column value
     * @throws SQLException if a database access error occurs
     */
    Object getObject(String columnName)
            throws SQLException;

    /**
     * Maps the given <code>ResultSet</code> column name to its
     * <code>ResultSet</code> column index.
     *
     * @param columnName the name of the column
     * @return the column index of the given column name
     * @throws SQLException if the <code>ResultSet</code> object does not
     *         contain <code>columnName</code> or a database access error occurs
     */
    int findColumn(String columnName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a java.io.Reader object.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return a <code>java.io.Reader</code> object that contains the column
     *         value; if the value is SQL NULL, the value returned is null in
     *         the Java programming language.
     * @throws SQLException if a database access error occurs
     */
    Reader getCharacterStream(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a java.io.Reader object.
     *
     * @param columnName the name of the column
     * @return a <code>java.io.Reader</code> object that contains the column
     *         value; if the value is SQL NULL, the value returned is null in
     *         the Java programming language.
     * @throws SQLException if a database access error occurs
     */
    Reader getCharacterStream(String columnName)
            throws SQLException;

    /**
     * Retrieves whether the cursor is before the first row in this
     * <code>ResultSet</code> object.
     *
     * @return true if the cursor is before the first row; false if the cursor
     *         is at any other position or the result set contains no rows
     * @throws SQLException if a database access error occurs
     */
    boolean isBeforeFirst()
            throws SQLException;

    /**
     * Retrieves whether the cursor is after the last row in this
     * <code>ResultSet</code> object.
     *
     * @return true if the cursor is after the last row; false if the cursor is
     *         at any other position or the result set contains no rows
     * @throws SQLException if a database access error occurs
     */
    boolean isAfterLast()
            throws SQLException;

    /**
     * Retrieves whether the cursor is on the first row of this
     * <code>ResultSet</code> object.
     *
     * @return true if the cursor is on the first row; false otherwise
     * @throws SQLException if a database access error occurs
     */
    boolean isFirst()
            throws SQLException;

    /**
     * Retrieves whether the cursor is on the last row of this
     * <code>ResultSet</code> object. Note: Calling the method isLast may be
     * expensive because the JDBC driver might need to fetch ahead one row in
     * order to determine whether the current row is the last row in the result
     * set.
     *
     * @return true if the cursor is on the last row; false otherwise
     * @throws SQLException if a database access error occurs
     */
    boolean isLast()
            throws SQLException;

    /**
     * Moves the cursor to the front of this <code>ResultSet</code> object, just
     * before the first row. This method has no effect if the result set
     * contains no rows.
     *
     * @throws SQLException if a database access error occurs or the result set
     *         type is TYPE_FORWARD_ONLY
     */
    void beforeFirst()
            throws SQLException;

    /**
     * Moves the cursor to the end of this <code>ResultSet</code> object, just
     * after the last row. This method has no effect if the result set
     * contains no rows.
     *
     * @throws SQLException if a database access error occurs or the result set
     *         type is TYPE_FORWARD_ONLY
     */
    void afterLast()
            throws SQLException;

    /**
     * Moves the cursor to the first row in this <code>ResultSet</code> object.
     *
     * @return true if the cursor is on a valid row; false if there are no rows
     *          in the result set
     * @throws SQLException if a database access error occurs or the result set
     *         type is TYPE_FORWARD_ONLY
     */
    boolean first()
            throws SQLException;

    /**
     * Moves the cursor to the last row in this <code>ResultSet</code> object.
     *
     * @return true if the cursor is on a valid row; false if there are no rows
     *          in the result set
     * @throws SQLException if a database access error occurs or the result set
     *         type is TYPE_FORWARD_ONLY
     */
    boolean last()
            throws SQLException;

    /**
     * Retrieves the current row number. The first row is number 1, the second
     * number 2, and so on.
     *
     * @return the current row number; 0 if there is no current row
     * @throws SQLException if a database access error occurs
     */
    int getRow()
            throws SQLException;

    /**
     *
     * Moves the cursor to the given row number in this <code>ResultSet</code>
     * object.
     * <p/>
     * If the row number is positive, the cursor moves to the given row number
     * with respect to the beginning of the result set. The first row is row 1,
     * the second is row 2, and so on.
     * <p/>
     * If the given row number is negative, the cursor moves to an absolute row
     * position with respect to the end of the result set. For example, calling
     * the method <code>absolute(-1)</code> positions the cursor on the last row;
     * calling the method <code>absolute(-2)</code> moves the cursor to the
     * next-to-last row, and so on.
     * <p/>
     * An attempt to position the cursor beyond the first/last row in the result
     * set leaves the cursor before the first row or after the last row.
     * <p/>
     * <b>Note:</b> Calling <code>absolute(1)</code> is the same as calling
     * <code>first()</code>. Calling <code>absolute(-1)</code> is the same as
     * calling <code>last()</code>.
     *
     * @param row the number of the row to which the cursor should move. A
     *            positive number indicates the row number counting from the
     *            beginning of the result set; a negative number indicates the
     *            row number counting from the end of the result set
     * @return true if the cursor is on the result set; false otherwise
     * @throws SQLException if a database access error occurs or the result set
     *         type is TYPE_FORWARD_ONLY
     */
    boolean absolute(int row)
            throws SQLException;

    /**
     * Moves the cursor a relative number of rows, either positive or negative.
     * Attempting to move beyond the first/last row in the result set positions
     * the cursor before/after the the first/last row. Calling
     * <code>relative(0)</code> is valid, but does not change the cursor
     * position.
     * <p/>
     * <b>Note:</b> Calling the method <code>relative(1)</code> is identical to
     * calling the method <code>next()</code> and calling the method
     * <code>relative(-1)</code> is identical to calling the method
     * <code>previous()</code>.
     *
     * @param rows an int specifying the number of rows to move from the current
     *             row; a positive number moves the cursor forward; a negative
     *             number moves the cursor backward
     * @return <code>true</code> if the cursor is on a row; <code>false</code>
     *         otherwise
     * @throws SQLException if a database access error occurs, there is no
     *                      current row, or the result set type is
     *                      <code>TYPE_FORWARD_ONLY</code>
     */
    boolean relative(int rows)
            throws SQLException;

    /**
     * Moves the cursor to the previous row in this <code>ResultSet</code> object.
     *
     * @return true if the cursor is on a valid row;
     *         false if it is off the result set
     * @throws SQLException if a database access error occurs or the result set
     *                      type is <code>TYPE_FORWARD_ONLY</code>
     */
    boolean previous()
            throws SQLException;

    /**
     * Gives a hint as to the direction in which the rows in this
     * <code>ResultSet</code> object will be processed. The initial value is
     * determined by the <code>Statement</code> object that produced this
     * <code>ResultSet</code> object. The fetch direction may be changed at any
     * time.
     *
     * @param direction an <code>int</code> specifying the suggested fetch
     *                  direction; one of <code>ResultSet.FETCH_FORWARD</code>,
     *                  <code>ResultSet.FETCH_REVERSE</code>, or
     *                  <code>ResultSet.FETCH_UNKNOWN</code>
     * @throws SQLException if a database access error occurs or the result set
     *                      type is TYPE_FORWARD_ONLY and the fetch direction is
     *                      not FETCH_FORWARD
     * @see Statement#setFetchDirection(int)
     * @see #getFetchDirection()
     */
    void setFetchDirection(int direction)
            throws SQLException;

    /**
     * Retrieves the fetch direction for this <code>ResultSet</code> object.
     *
     * @return the current fetch direction for this <code>ResultSet</code> object
     * @throws SQLException if a database access error occurs
     * @see #setFetchDirection(int)
     */
    int getFetchDirection()
            throws SQLException;

    /**
     * Gives the JDBC driver a hint as to the number of rows that should be
     * fetched from the database when more rows are needed for this
     *<code>ResultSet</code> object. If the fetch size specified is zero, the
     * JDBC driver ignores the value and is free to make its own best guess as
     * to what the fetch size should be. The default value is set by the
     * <code>Statement</code> object that created the result set. The fetch size
     * may be changed at any time.
     *
     * @param rows the number of rows to fetch
     * @throws SQLException if a database access error occurs or the condition
     *                      0 <= rows <= this.getMaxRows() is not satisfied
     * @see #getFetchSize()
     */
    void setFetchSize(int rows)
            throws SQLException;

    /**
     * Retrieves the fetch size for this <code>ResultSet</code> object.
     *
     * @return the current fetch size for this code>ResultSet</code> object
     * @throws SQLException if a database access error occurs
     * @see #setFetchSize(int)
     */
    int getFetchSize()
            throws SQLException;

    /**
     * Retrieves the type of this <code>ResultSet</code> object. The type is
     * determined by the <code>Statement</code> object that created the result
     * set.
     *
     * @return ResultSet.TYPE_FORWARD_ONLY,
     *         ResultSet.TYPE_SCROLL_INSENSITIVE,
     *         or ResultSet.TYPE_SCROLL_SENSITIVE
     * @throws SQLException if a database access error occurs
     */
    int getType()
            throws SQLException;

    /**
     * Retrieves the concurrency mode of this <code>ResultSet</code> object.
     * The concurrency used is determined by the <code>Statement</code> object
     * that created the result set.
     *
     * @return the concurrency type, either ResultSet.CONCUR_READ_ONLY or
     *                               ResultSet.CONCUR_UPDATABLE
     * @throws SQLException if a database access error occurs
     */
    int getConcurrency()
            throws SQLException;

    /**
     * Retrieves whether the current row has been updated. The value returned
     * depends on whether or not the result set can detect updates.
     *
     * @return true if both (1) the row has been visibly updated by the owner or
     *         another and (2) updates are detected
     * @throws SQLException if a database access error occurs
     * @see DatabaseMetaData#updatesAreDetected(int)
     */
    boolean rowUpdated()
            throws SQLException;

    /**
     * Retrieves whether the current row has had an insertion. The value
     * returned depends on whether or not this <code>ResultSet</code> object
     * can detect visible inserts.
     *
     * @return true if a row has had an insertion and insertions are detected;
     *         false otherwise
     * @throws SQLException if a database access error occurs
     * @see DatabaseMetaData#insertsAreDetected(int)
     */
    boolean rowInserted()
            throws SQLException;

    /**
     * Retrieves whether a row has been deleted. A deleted row may leave a
     * visible "hole" in a result set. This method can be used to detect holes
     * in a result set. The value returned depends on whether or not this
     * <code>ResultSet</code> object can detect deletions.
     *
     * @return true if a row was deleted and deletions are detected;
     *         false otherwise
     * @throws SQLException if a database access error occurs
     * @see DatabaseMetaData#deletesAreDetected(int)
     */
    boolean rowDeleted()
            throws SQLException;

    /**
     * Gives a nullable column a null value. The updater methods are used to
     * update column values in the current row or the insert row. The updater
     * methods do not update the underlying database; instead the
     * <code>updateRow</code> or <code>insertRow</code> methods are called to
     * update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @throws SQLException if a database access error occurs
     */
    void updateNull(int columnIndex)
            throws SQLException;

    /**
     * Updates the designated column with a boolean value. The updater methods
     * are used to update column values in the current row or the insert row.
     * The updater methods do not update the underlying database; instead the
     * <code>updateRow</code> or <code>insertRow</code> methods are called to
     * update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateBoolean(int columnIndex, boolean x)
            throws SQLException;

    /**
     * Updates the designated column with a byte value. The updater methods are
     * used to update column values in the current row or the insert row. The
     * updater methods do not update the underlying database; instead the
     * <code>updateRow</code> or <code>insertRow</code> methods are called to
     * update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateByte(int columnIndex, byte x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>short</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateShort(int columnIndex, short x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>int</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateInt(int columnIndex, int x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>long</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateLong(int columnIndex, long x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>float</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateFloat(int columnIndex, float x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>double</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateDouble(int columnIndex, double x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>string</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateString(int columnIndex, String x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>byte array</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateBytes(int columnIndex, byte[] x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>java.sql.Date</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateDate(int columnIndex, Date x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>java.sql.Time</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateTime(int columnIndex, Time x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>java.sql.Timestamp</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateTimestamp(int columnIndex, Timestamp x)
            throws SQLException;

    /**
     * Updates the designated column with an <code> ascii stream</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @param length the length of the stream
     * @throws SQLException if a database access error occurs
     */
    void updateAsciiStream(int columnIndex, InputStream x, int length)
            throws SQLException;

    /**
     * Updates the designated column with a <code>binary stream</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @param length the length of the stream
     * @throws SQLException if a database access error occurs
     */
    void updateBinaryStream(int columnIndex, InputStream x, int length)
            throws SQLException;

    /**
     * Updates the designated column with a <code>character stream</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @param length the length of the stream
     * @throws SQLException if a database access error occurs
     */
    void updateCharacterStream(int columnIndex, Reader x, int length)
            throws SQLException;

    /**
     * Updates the designated column with an <code>Object</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @param scale for <code>java.sql.Types.DECIMA</code> or
     *              <code>java.sql.Types.NUMERIC</code> types, this is the
     *              number of digits after the decimal point. For all other
     *              types this value will be ignored.
     * @throws SQLException if a database access error occurs
     */
    void updateObject(int columnIndex, Object x, int scale)
            throws SQLException;

    /**
     * Updates the designated column with an <code>Object</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateObject(int columnIndex, Object x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>null</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @throws SQLException if a database access error occurs
     */
    void updateNull(String columnName)
            throws SQLException;

    /**
     * Updates the designated column with a <code>boolean</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateBoolean(String columnName, boolean x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>byte</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateByte(String columnName, byte x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>short</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateShort(String columnName, short x)
            throws SQLException;

    /**
     * Updates the designated column with an <code>int</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateInt(String columnName, int x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>long</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateLong(String columnName, long x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>float</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateFloat(String columnName, float x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>double</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateDouble(String columnName, double x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>string</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateString(String columnName, String x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>byte array</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateBytes(String columnName, byte[] x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>java.sql.Date</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateDate(String columnName, Date x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>java.sql.Time</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateTime(String columnName, Time x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>java.sql.Timestamp</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateTimestamp(String columnName, Timestamp x)
            throws SQLException;

    /**
     * Updates the designated column with an <code>ascii stream</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @param length the length of the stream
     * @throws SQLException if a database access error occurs
     */
    void updateAsciiStream(String columnName, InputStream x, int length)
            throws SQLException;

    /**
     * Updates the designated column with a <code>binary stream</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @param length the length of the stream
     * @throws SQLException if a database access error occurs
     */
    void updateBinaryStream(String columnName, InputStream x, int length)
            throws SQLException;

    /**
     * Updates the designated column with a <code>character stream</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param reader the java.io.Reader object containing the new column value
     * @param length the length of the stream
     * @throws SQLException if a database access error occurs
     */
    void updateCharacterStream(String columnName, Reader reader, int length)
            throws SQLException;

    /**
     * Updates the designated column with an <code>Object</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @param scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
     *              this is the number of digits after the decimal point. For
     *              all other types this value will be ignored.
     * @throws SQLException if a database access error occurs
     */
    void updateObject(String columnName, Object x, int scale)
            throws SQLException;

    /**
     * Updates the designated column with an <code>Object</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateObject(String columnName, Object x)
            throws SQLException;

    /**
     * Inserts the contents of the insert row into this <code>ResultSet</code>
     * object and into the database. The cursor must be on the insert row when
     * this method is called.
     *
     * @throws SQLException if a database access error occurs, if this method is
     *                      called when the cursor is not on the insert row, or
     *                      if not all of non-nullable columns in the insert row
     *                      have been given a value
     */
    void insertRow()
            throws SQLException;

    /**
     * Updates the underlying database with the new contents of the current row
     * of this <code>ResultSet</code> object. This method cannot be called when
     * the cursor is on the insert row.
     *
     * @throws SQLException if a database access error occurs or if this method
     *                      is called when the cursor is on the insert row
     */
    void updateRow()
            throws SQLException;

    /**
     * Deletes the current row from this <code>ResultSet</code> object and from
     * the underlying database. This method cannot be called when the cursor is
     * on the insert row.
     *
     * @throws SQLException if a database access error occurs or if this method
     *                      is called when the cursor is on the insert row
     */
    void deleteRow()
            throws SQLException;

    /**
     * Refreshes the current row with its most recent value in the database.
     * This method cannot be called when the cursor is on the insert row.
     * <p/>
     * The <code>refreshRow</code> method provides a way for an application to
     * explicitly tell the JDBC driver to refetch a row(s) from the database. An
     * application may want to call refreshRow when caching or prefetching is
     * being done by the JDBC driver to fetch the latest value of a row from the
     * database. The JDBC driver may actually refresh multiple rows at once if
     * the fetch size is greater than one.
     * <p/>
     * All values are refetched subject to the transaction isolation level and
     * cursor sensitivity. If <code>refreshRow</code> is called after calling an
     * updater method, but before calling the method <code>updateRow</code>,
     * then the updates made to the row are lost. Calling the method
     * <code>refreshRow</code> frequently will likely slow performance.
     *
     * @throws SQLException if a database access error occurs or if this method
     *                      is called when the cursor is on the insert row
     */
    void refreshRow()
            throws SQLException;

    /**
     * Cancels the updates made to the current row in this
     * <code>ResultSet</code> object. This method may be called after calling an
     * updater method(s) and before calling the method <code>updateRow</code> to
     * roll back the updates made to a row. If no updates have been made or
     * <code>updateRow</code> has already been called, this method has no effect.
     *
     * @throws SQLException if a database access error occurs or if this method
     *                      is called when the cursor is on the insert row
     */
    void cancelRowUpdates()
            throws SQLException;

    /**
     * Moves the cursor to the insert row. The current cursor position is
     * remembered while the cursor is positioned on the insert row. The insert
     * row is a special row associated with an updatable result set. It is
     * essentially a buffer where a new row may be constructed by calling the
     * updater methods prior to inserting the row into the result set. Only the
     * <code>updater, getter, and insertRow</code> methods may be called when
     * the cursor is on the insert row. All of the columns in a result set must
     * be given a value each time this method is called before calling
     * <code>insertRow</code>. An updater method must be called before a getter
     * method can be called on a column value.
     *
     * @throws SQLException if a database access error occurs or the result set
     *                      is not updatable
     */
    void moveToInsertRow()
            throws SQLException;

    /**
     * Moves the cursor to the remembered cursor position, usually the current
     * row. This method has no effect if the cursor is not on the insert row.
     *
     * @throws SQLException if a database access error occurs or the result set
     *                      is not updatable
     */
    void moveToCurrentRow()
            throws SQLException;

    /**
     * Retrieves the Statement object that produced this <code>ResultSet</code>
     * object. If the result set was generated some other way, such as by a
     * <code>DatabaseMetaData</code> method, this method returns null.
     *
     * @return the <code>Statment</code> object that produced this
     *         <code>ResultSet</code> object or null if the result set was
     *         produced some other way
     * @throws SQLException if a database access error occurs
     */
    Statement getStatement()
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>Blob</code> object in the Java
     * programming language.
     *
     * @param i the first column is 1, the second is 2, ...
     * @return a <code>Blob</code> object representing the SQL BLOB value in
     *                                    the specified column
     * @throws SQLException if a database access error occurs
     */
    Blob getBlob(int i)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>Clob</code> object in the Java
     * programming language.
     *
     * @param i the first column is 1, the second is 2, ...
     * @return a <code>Clob</code> object representing the SQL CLOB value in
     *                                    the specified column
     * @throws SQLException if a database access error occurs
     */
    Clob getClob(int i)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>Blob</code> object in the Java
     * programming language.
     *
     * @param colName the name of the column from which to retrieve the value
     * @return a <code>Blob</code> object representing the SQL BLOB value in the
     *                                    specified column
     * @throws SQLException if a database access error occurs
     */
    Blob getBlob(String colName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>Clob</code> object in the Java
     * programming language.
     *
     * @param colName the name of the column from which to retrieve the value
     * @return a <code>Clob</code> object representing the SQL CLOB value in the
     *                                    specified column
     * @throws SQLException if a database access error occurs
     */
    Clob getClob(String colName)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Date</code> object in
     * the Java programming language. This method uses the given calendar to
     * construct an appropriate millisecond value for the date if the underlying
     * database does not store timezone information.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param cal the <code>java.util.Calendar</code> object to use in
     *            constructing the date
     * @return the column value as a <code>java.sql.Date</code> object; if the
     *         value is SQL NULL, the value returned is null in the Java
     *         programming language
     * @throws SQLException if a database access error occurs
     */
    Date getDate(int columnIndex, Calendar cal)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Date</code> object in
     * the Java programming language. This method uses the given calendar to
     * construct an appropriate millisecond value for the date if the underlying
     * database does not store timezone information.
     *
     * @param columnName the SQL name of the column from which to retrieve the
     *                      value
     * @param cal the <code>java.util.Calendar</code> object to use in
     *            constructing the date
     * @return the column value as a <code>java.sql.Date</code> object; if the
     *         value is SQL NULL, the value returned is null in the Java
     *         programming language
     * @throws SQLException if a database access error occurs
     */
    Date getDate(String columnName, Calendar cal)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Time</code> object in
     * the Java programming language. This method uses the given calendar to
     * construct an appropriate millisecond value for the date if the underlying
     * database does not store timezone information.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param cal the <code>java.util.Calendar</code> object to use in
     *            constructing the time
     * @return the column value as a <code>java.sql.Time</code> object; if the
     *         value is SQL NULL, the value returned is null in the Java
     *         programming language
     * @throws SQLException if a database access error occurs
     */
    Time getTime(int columnIndex, Calendar cal)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Time</code> object in
     * the Java programming language. This method uses the given calendar to
     * construct an appropriate millisecond value for the date if the underlying
     * database does not store timezone information.
     *
     * @param columnName the SQL name of the column
     * @param cal the <code>java.util.Calendar</code> object to use in
     *            constructing the time
     * @return the column value as a <code>java.sql.Time</code> object; if the
     *         value is SQL NULL, the value returned is null in the Java
     *         programming language
     * @throws SQLException if a database access error occurs
     */
    Time getTime(String columnName, Calendar cal)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object
     * in the Java programming language. This method uses the given calendar to
     * construct an appropriate millisecond value for the date if the underlying
     * database does not store timezone information.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param cal the <code>java.util.Calendar</code> object to use in
     *            constructing the timestamp
     * @return the column value as a <code>java.sql.Timestamp</code> object; if
     *         the value is SQL NULL, the value returned is null in the Java
     *         programming language
     * @throws SQLException if a database access error occurs
     */
    Timestamp getTimestamp(int columnIndex, Calendar cal)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object
     * in the Java programming language. This method uses the given calendar to
     * construct an appropriate millisecond value for the date if the underlying
     * database does not store timezone information.
     *
     * @param columnName the SQL name of the column
     * @param cal the <code>java.util.Calendar</code> object to use in
     *            constructing the timestamp
     * @return the column value as a <code>java.sql.Timestamp</code> object; if
     *         the value is SQL NULL, the value returned is null in the Java
     *         programming language
     * @throws SQLException if a database access error occurs
     */
    Timestamp getTimestamp(String columnName, Calendar cal)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.net.URL</code> object in
     * the Java programming language.
     *
     * @param columnIndex the index of the column 1 is the first, 2 is the
     *                    second,...
     * @return the column value as a <code>java.net.URL</code> object; if the
     *         value is SQL NULL, the value returned is null in the Java
     *         programming language
     * @throws SQLException if a database access error occurs, or if a URL is
     *                      malformed
     */
    URL getURL(int columnIndex)
            throws SQLException;

    /**
     * Retrieves the value of the designated column in the current row of this
     * <code>ResultSet</code> object as a <code>java.net.URL</code> object in
     * the Java programming language.
     *
     * @param columnName the SQL name of the column
     * @return the column value as a <code>java.net.URL</code> object; if the
     *         value is SQL NULL, the value returned is null in the Java
     *         programming language
     * @throws SQLException if a database access error occurs, or if a URL is
     *                      malformed
     */
    URL getURL(String columnName)
            throws SQLException;

    /**
     * Updates the designated column with a <code>java.sql.Blob</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateBlob(int columnIndex, Blob x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>java.sql.Blob</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateBlob(String columnName, Blob x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>java.sql.Clob</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateClob(int columnIndex, Clob x)
            throws SQLException;

    /**
     * Updates the designated column with a <code>java.sql.Clob</code> value.
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the <code>updateRow</code> or <code>insertRow</code>
     * methods are called to update the database.
     *
     * @param columnName the name of the column
     * @param x the new column value
     * @throws SQLException if a database access error occurs
     */
    void updateClob(String columnName, Clob x)
            throws SQLException;
}
